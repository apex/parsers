// Code generated by ldetool --package parsers --go-string parsers.lde. DO NOT EDIT.

package parsers

import (
	"fmt"
	"strconv"
	"strings"
)

var constBslashTDurationColonSpace = "\tDuration: "
var constENDSpaceRequestIDColonSpace = "END RequestId: "
var constREPORTSpaceRequestIDColonSpace = "REPORT RequestId: "
var constSTARTSpaceRequestIDColonSpace = "START RequestId: "
var constSpaceMBBslashT = " MB\t"
var constSpaceMBBslashTInitSpaceDurationColonSpace = " MB\tInit Duration: "
var constSpaceMBBslashTMaxSpaceMemorySpaceUsedColonSpace = " MB\tMax Memory Used: "
var constSpaceMsBslashT = " ms\t"
var constSpaceMsBslashTBilledSpaceDurationColonSpace = " ms\tBilled Duration: "
var constSpaceMsBslashTMemorySpaceSizeColonSpace = " ms\tMemory Size: "
var constSpaceVersionColonSpace = " Version: "

// AWSLambdaStart event.
type AWSLambdaStart struct {
	Rest      string
	RequestID string
	Version   string
}

// Extract ...
func (p *AWSLambdaStart) Extract(line string) (bool, error) {
	p.Rest = line
	var pos int

	// Checks if the rest starts with `"START RequestId: "` and pass it
	if strings.HasPrefix(p.Rest, constSTARTSpaceRequestIDColonSpace) {
		p.Rest = p.Rest[len(constSTARTSpaceRequestIDColonSpace):]
	} else {
		return false, nil
	}

	// Take until " Version: " as RequestID(string)
	pos = strings.Index(p.Rest, constSpaceVersionColonSpace)
	if pos >= 0 {
		p.RequestID = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceVersionColonSpace):]
	} else {
		return false, nil
	}

	// Take the rest as Version(string)
	p.Version = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// AWSLambdaEnd event.
type AWSLambdaEnd struct {
	Rest      string
	RequestID string
}

// Extract ...
func (p *AWSLambdaEnd) Extract(line string) (bool, error) {
	p.Rest = line

	// Checks if the rest starts with `"END RequestId: "` and pass it
	if strings.HasPrefix(p.Rest, constENDSpaceRequestIDColonSpace) {
		p.Rest = p.Rest[len(constENDSpaceRequestIDColonSpace):]
	} else {
		return false, nil
	}

	// Take the rest as RequestID(string)
	p.RequestID = p.Rest
	p.Rest = p.Rest[len(p.Rest):]
	return true, nil
}

// AWSLambdaReport event.
type AWSLambdaReport struct {
	Rest           string
	RequestID      string
	Duration       float64
	BilledDuration float64
	MemorySize     int
	MaxMemoryUsed  int
}

// Extract ...
func (p *AWSLambdaReport) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var pos int
	var tmp string
	var tmpFloat float64
	var tmpInt int64

	// Checks if the rest starts with `"REPORT RequestId: "` and pass it
	if strings.HasPrefix(p.Rest, constREPORTSpaceRequestIDColonSpace) {
		p.Rest = p.Rest[len(constREPORTSpaceRequestIDColonSpace):]
	} else {
		return false, nil
	}

	// Take until "\tDuration: " as RequestID(string)
	pos = strings.Index(p.Rest, constBslashTDurationColonSpace)
	if pos >= 0 {
		p.RequestID = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constBslashTDurationColonSpace):]
	} else {
		return false, nil
	}

	// Take until " ms\tBilled Duration: " as Duration(float64)
	pos = strings.Index(p.Rest, constSpaceMsBslashTBilledSpaceDurationColonSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMsBslashTBilledSpaceDurationColonSpace):]
	} else {
		return false, nil
	}
	if tmpFloat, err = strconv.ParseFloat(tmp, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Duration(float64): %s", tmp, err)
	}
	p.Duration = float64(tmpFloat)

	// Take until " ms\tMemory Size: " as BilledDuration(float64)
	pos = strings.Index(p.Rest, constSpaceMsBslashTMemorySpaceSizeColonSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMsBslashTMemorySpaceSizeColonSpace):]
	} else {
		return false, nil
	}
	if tmpFloat, err = strconv.ParseFloat(tmp, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field BilledDuration(float64): %s", tmp, err)
	}
	p.BilledDuration = float64(tmpFloat)

	// Take until " MB\tMax Memory Used: " as MemorySize(int)
	pos = strings.Index(p.Rest, constSpaceMBBslashTMaxSpaceMemorySpaceUsedColonSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMBBslashTMaxSpaceMemorySpaceUsedColonSpace):]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field MemorySize(int): %s", tmp, err)
	}
	p.MemorySize = int(tmpInt)

	// Take until " MB\t" as MaxMemoryUsed(int)
	pos = strings.Index(p.Rest, constSpaceMBBslashT)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMBBslashT):]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field MaxMemoryUsed(int): %s", tmp, err)
	}
	p.MaxMemoryUsed = int(tmpInt)

	return true, nil
}

// AWSLambdaReportInit event.
type AWSLambdaReportInit struct {
	Rest           string
	RequestID      string
	Duration       float64
	BilledDuration float64
	MemorySize     int
	MaxMemoryUsed  int
	InitDuration   float64
}

// Extract ...
func (p *AWSLambdaReportInit) Extract(line string) (bool, error) {
	p.Rest = line
	var err error
	var pos int
	var tmp string
	var tmpFloat float64
	var tmpInt int64

	// Checks if the rest starts with `"REPORT RequestId: "` and pass it
	if strings.HasPrefix(p.Rest, constREPORTSpaceRequestIDColonSpace) {
		p.Rest = p.Rest[len(constREPORTSpaceRequestIDColonSpace):]
	} else {
		return false, nil
	}

	// Take until "\tDuration: " as RequestID(string)
	pos = strings.Index(p.Rest, constBslashTDurationColonSpace)
	if pos >= 0 {
		p.RequestID = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constBslashTDurationColonSpace):]
	} else {
		return false, nil
	}

	// Take until " ms\tBilled Duration: " as Duration(float64)
	pos = strings.Index(p.Rest, constSpaceMsBslashTBilledSpaceDurationColonSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMsBslashTBilledSpaceDurationColonSpace):]
	} else {
		return false, nil
	}
	if tmpFloat, err = strconv.ParseFloat(tmp, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field Duration(float64): %s", tmp, err)
	}
	p.Duration = float64(tmpFloat)

	// Take until " ms\tMemory Size: " as BilledDuration(float64)
	pos = strings.Index(p.Rest, constSpaceMsBslashTMemorySpaceSizeColonSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMsBslashTMemorySpaceSizeColonSpace):]
	} else {
		return false, nil
	}
	if tmpFloat, err = strconv.ParseFloat(tmp, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field BilledDuration(float64): %s", tmp, err)
	}
	p.BilledDuration = float64(tmpFloat)

	// Take until " MB\tMax Memory Used: " as MemorySize(int)
	pos = strings.Index(p.Rest, constSpaceMBBslashTMaxSpaceMemorySpaceUsedColonSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMBBslashTMaxSpaceMemorySpaceUsedColonSpace):]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field MemorySize(int): %s", tmp, err)
	}
	p.MemorySize = int(tmpInt)

	// Take until " MB\tInit Duration: " as MaxMemoryUsed(int)
	pos = strings.Index(p.Rest, constSpaceMBBslashTInitSpaceDurationColonSpace)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMBBslashTInitSpaceDurationColonSpace):]
	} else {
		return false, nil
	}
	if tmpInt, err = strconv.ParseInt(tmp, 10, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field MaxMemoryUsed(int): %s", tmp, err)
	}
	p.MaxMemoryUsed = int(tmpInt)

	// Take until " ms\t" as InitDuration(float64)
	pos = strings.Index(p.Rest, constSpaceMsBslashT)
	if pos >= 0 {
		tmp = p.Rest[:pos]
		p.Rest = p.Rest[pos+len(constSpaceMsBslashT):]
	} else {
		return false, nil
	}
	if tmpFloat, err = strconv.ParseFloat(tmp, 64); err != nil {
		return false, fmt.Errorf("parsing `%s` into field InitDuration(float64): %s", tmp, err)
	}
	p.InitDuration = float64(tmpFloat)

	return true, nil
}
